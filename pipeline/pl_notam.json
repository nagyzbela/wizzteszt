{
	"name": "pl_notam",
	"properties": {
		"activities": [
			{
				"name": "File to Notam temp",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Set created id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"additionalColumns": [
							{
								"name": "TLoadDate",
								"value": {
									"value": "@utcnow()",
									"type": "Expression"
								}
							},
							{
								"name": "TFileName",
								"value": {
									"value": "@pipeline().parameters.InputFileName",
									"type": "Expression"
								}
							},
							{
								"name": "TCreatedId",
								"value": {
									"value": "@variables('v_createdid')",
									"type": "Expression"
								}
							}
						],
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "SqlDWSink",
						"writeBehavior": "Insert",
						"sqlWriterUseTableLock": false,
						"tableOption": "autoCreate",
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"type": "String",
									"ordinal": 1
								},
								"sink": {
									"name": "notam_line",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "TLoadDate",
									"type": "String"
								},
								"sink": {
									"name": "TLoadDate",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "TFileName",
									"type": "String"
								},
								"sink": {
									"name": "TFileName",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "TCreatedId",
									"type": "String"
								},
								"sink": {
									"name": "TCreatedId",
									"physicalType": "String"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "NOTAM",
						"type": "DatasetReference",
						"parameters": {
							"file_name": "NOTAM.txt"
						}
					}
				],
				"outputs": [
					{
						"referenceName": "synapse_table",
						"type": "DatasetReference",
						"parameters": {
							"schema_name": "BcAdfLido",
							"table_name": "notam_tmp"
						}
					}
				]
			},
			{
				"name": "insert temp to notam",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "File to Notam temp",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "TFilename",
									"type": "String",
									"value": {
										"value": "@pipeline().parameters.InputFileName",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "CreatedId",
									"type": "String",
									"value": {
										"value": "@variables('v_createdid')",
										"type": "Expression"
									},
									"direction": "Input"
								},
								{
									"name": "TLoadDate",
									"type": "Datetime",
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "Query",
							"text": "insert into [BcAdfLido].[NOTAM]\n([Length]\n      ,[Format]\n      ,[SubFormat]\n      ,[Type]\n      ,[SubType]\n      ,[Publisher]\n      ,[Class]\n      ,[Series]\n      ,[Year]\n      ,[Number]\n      ,[SubNumber]\n      ,[Multipart]\n      ,[QCode23]\n      ,[QCode45]\n      ,[EffectiveFrom]\n      ,[EffectiveTill]\n      ,[EST]\n      ,[HeaderIcaoAirportCode]\n      ,[YearOfReferenceNotam]\n      ,[NumberOfReferenceNotam]\n      ,[Unimportant1]\n      ,[Unimportant2]\n      ,[NumberAndType]\n      ,[IcaoCodeFIR]\n      ,[Code]\n      ,[Traffic]\n      ,[Purpose]\n      ,[Scope]\n      ,[Lower]\n      ,[Upper]\n      ,[GeoLatitudeNm]\n      ,[GeoLongitudeNm]\n      ,[GeoRadiusNm]\n      ,[IcaoAirportCode]\n      ,[ActivityStart]\n      ,[ValidityEnd]\n      ,[Schedule]\n      ,[Text]\n      ,[LowerLimit]\n      ,[UpperLimit]\n      ,[MessageText]\n      ,[TCreatedId]\n      ,[TLoadDate]\n      ,[TFilename])\nwith base_data as (\nSELECT [notam_line],row_number() over(order by (SELECT NULL)) rn\nFROM [BcAdfLido].[notam_tmp]\nwhere \nTFileName=@TFilename\nand TCreatedid=@TCreatedid\n),\nheader_data_base as (select  \n*,\nrow_number() over(order by (SELECT NULL)) rn\nfrom \nSTRING_SPLIT(\n(select \nreplace(notam_line,'>NOTAMPARSE<','') ln\n from base_data where rn=1),'|')),\n header_data as (\n select \n max( case when rn=1 then value end) [Length],\nmax( case when rn=2 then value end) [Format],\nmax( case when rn=3 then value end) [SubFormat],\nmax( case when rn=4 then value end) [Type],\nmax( case when rn=5 then value end) [SubType],\nmax( case when rn=6 then value end) [Publisher],\nmax( case when rn=7 then value end) [Class],\nmax( case when rn=8 then value end) [Series],\nmax( case when rn=9 then value end) [Year],\nmax( case when rn=10 then value end) [Number],\nmax( case when rn=11 then value end) [SubNumber],\nmax( case when rn=12 then value end) [Multipart],\nmax( case when rn=13 then value end) [QCode23],\nmax( case when rn=14 then value end) [QCode45],\ndateadd(Second, cast(max( case when rn=15 then value end) as int),'1970-01-01') [EffectiveFrom],\ndateadd(Second, cast(max( case when rn=16 then value end) as int),'1970-01-01') [EffectiveTill],\nmax( case when rn=17 then value end) [EST],\nmax( case when rn=18 then value end) [HeaderIcaoAirportCode],\nmax( case when rn=19 then value end) [YearOfReferenceNotam],\nmax( case when rn=20 then value end) [NumberOfReferenceNotam],\nmax( case when rn=21 then value end) [Unimportant1],\nmax( case when rn=22 then value end) [Unimportant2],\nmax( case when rn=23 then value end) [NumberAndType]\n  from header_data_base),\nq_data_base as (select  \n*,\nrow_number() over(order by (SELECT NULL)) rn\nfrom \nSTRING_SPLIT(\n(select \nreplace(notam_line,'Q)','') ln\n from base_data where rn=2),'/')),\n q_data_base_raw as (\n select \n max( case when rn=1 then value end) [IcaoCodeFIR],\nmax( case when rn=2 then value end) [Code],\nmax( case when rn=3 then value end) [Traffic],\nmax( case when rn=4 then value end) [Purpose],\nmax( case when rn=5 then value end) [Scope],\nmax( case when rn=6 then value end) [Lower],\nmax( case when rn=7 then value end) [Upper],\nmax( case when rn=8 then value end) [GeoLatitudeRaw]\n from q_data_base),\n q_data as (\n select \n [IcaoCodeFIR],\n[Code],\n[Traffic],\n[Purpose],\n[Scope],\n[Lower],\n[Upper],\ncase when CHARINDEX('S',GeoLatitudeRaw)> 0\n     then -1*(cast(SUBSTRING(GeoLatitudeRaw,1,2) as float) +cast(SUBSTRING(GeoLatitudeRaw,3,2) as float)/100)\n     else cast(SUBSTRING(GeoLatitudeRaw,1,2) as float) +cast(SUBSTRING(GeoLatitudeRaw,3,2) as float)/100\n     end [GeoLatitudeNm],\ncase when CHARINDEX('W',GeoLatitudeRaw)> 0\n     then -1*(cast(SUBSTRING(GeoLatitudeRaw,6,3) as float) +cast(SUBSTRING(GeoLatitudeRaw,9,2) as float)/100)\n     else cast(SUBSTRING(GeoLatitudeRaw,6,3) as float) +cast(SUBSTRING(GeoLatitudeRaw,9,2) as float)/100\n     end [GeoLongitudeNm],\ncast(right(GeoLatitudeRaw,3) as smallint) [GeoRadiusNm]\nfrom q_data_base_raw),\na_data as (\nselect \ntrim(replace(notam_line,'A)','')) IcaoAirportCode\n from \nbase_data\nwhere notam_line like 'A)%'\n),\nb_data as (\nselect \ncast(\n    '20'+\n    substring(substring (trim(replace(notam_line,'B)','')),1,10),1,2)+'-'+\n    substring(substring (trim(replace(notam_line,'B)','')),1,10),3,2)+'-'+\n    substring(substring (trim(replace(notam_line,'B)','')),1,10),5,2)+' '+\n    substring(substring (trim(replace(notam_line,'B)','')),1,10),7,2)+':'+\n    substring(substring (trim(replace(notam_line,'B)','')),1,10),9,2)    \n     as datetime) ActivityStart,\ncast(\n    '20'+\n    substring(substring (replace(notam_line,' ',''),charindex('C)',replace(notam_line,' ',''))+2,10),1,2)+'-'+\n    substring(substring (replace(notam_line,' ',''),charindex('C)',replace(notam_line,' ',''))+2,10),3,2)+'-'+\n    substring(substring (replace(notam_line,' ',''),charindex('C)',replace(notam_line,' ',''))+2,10),5,2)+' '+\n    substring(substring (replace(notam_line,' ',''),charindex('C)',replace(notam_line,' ',''))+2,10),7,2)+':'+\n    substring(substring (replace(notam_line,' ',''),charindex('C)',replace(notam_line,' ',''))+2,10),9,2)    \n     as datetime) ValidityEnd\n from \nbase_data\nwhere notam_line like 'B)%') ,\nd_data as (\nselect \n replace(notam_line,'D)','') Schedule\n from \nbase_data\nwhere notam_line like 'D)%'),\ne_data as (\nselect \n replace(notam_line,'E)','') Text\n from \nbase_data\nwhere notam_line like 'E)%'),\nf_data as (\nselect \n replace(notam_line,'F)','') LowerLimit\n from \nbase_data\nwhere notam_line like 'F)%'),\ng_data as (\nselect \n replace(notam_line,'G)','') UpperLimit\n from \nbase_data\nwhere notam_line like 'G)%'),\nall_data as (\nselect \n STRING_AGG([notam_line],CHAR(10)) Messagetext\n from \nbase_data)\nselect \n[Length]\n      ,[Format]\n      ,[SubFormat]\n      ,[Type]\n      ,[SubType]\n      ,[Publisher]\n      ,[Class]\n      ,[Series]\n      ,[Year]\n      ,[Number]\n      ,[SubNumber]\n      ,[Multipart]\n      ,[QCode23]\n      ,[QCode45]\n      ,[EffectiveFrom]\n      ,[EffectiveTill]\n      ,[EST]\n      ,[HeaderIcaoAirportCode]\n      ,[YearOfReferenceNotam]\n      ,[NumberOfReferenceNotam]\n      ,[Unimportant1]\n      ,[Unimportant2]\n      ,[NumberAndType]\n      ,[IcaoCodeFIR]\n      ,[Code]\n      ,[Traffic]\n      ,[Purpose]\n      ,[Scope]\n      ,[Lower]\n      ,[Upper]\n      ,[GeoLatitudeNm]\n      ,[GeoLongitudeNm]\n      ,[GeoRadiusNm]\n      ,[IcaoAirportCode]\n      ,[ActivityStart]\n      ,[ValidityEnd]\n      ,[Schedule]\n      ,[Text]\n      ,[LowerLimit]\n      ,[UpperLimit]\n      ,[MessageText]\n      ,@CreatedId\n      ,@TLoadDate\n    ,@TFilename\nfrom header_data\nfull outer join q_data on 1=1\nfull outer join a_data on 1=1\nfull outer join b_data on 1=1\nfull outer join d_data on 1=1\nfull outer join e_data on 1=1\nfull outer join f_data on 1=1\nfull outer join g_data on 1=1\nfull outer join all_data on 1=1"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Set created id",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "v_createdid",
					"value": {
						"value": "@guid()",
						"type": "Expression"
					}
				}
			},
			{
				"name": "clear temp",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "insert temp to notam",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "delete \nFROM [BcAdfLido].[notam_tmp]\nwhere \nTCreatedid='@{variables('v_createdid')}'",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"parameters": {
			"InputFileName": {
				"type": "string",
				"defaultValue": "NOTAM.txt"
			}
		},
		"variables": {
			"v_createdid": {
				"type": "String"
			}
		},
		"annotations": []
	}
}